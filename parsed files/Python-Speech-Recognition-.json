[
  {
    "id": "repo-clone/app.py::__top_level__",
    "file": "repo-clone/app.py",
    "name": "__top_level__",
    "type": "TopLevel",
    "language": "python",
    "ast_path": [
      "Module"
    ],
    "is_script_entry": true,
    "context": {
      "class": null,
      "is_method": false,
      "is_async": false,
      "decorators": [],
      "args_count": 0,
      "returns": null
    },
    "code_metrics": {
      "line_count": 26,
      "nesting_depth": 0,
      "cyclomatic_complexity": 0,
      "magic_numbers": [
        4
      ],
      "has_docstring": false
    },
    "docstring": "",
    "code": "import speech_recognition as sr\n\nrecognizer = sr.Recognizer()\n\nwith sr.Microphone() as source:\n    print(\"Adjusting noise \")\n    recognizer.adjust_for_ambient_noise(source, duration=1)\n    print(\"Recording for 4 seconds\")\n    recorded_audio = recognizer.listen(source, timeout=4)\n    print(\"Done recording\")\n\ntry:\n    print(\"Recognizing the text\")\n    text = recognizer.recognize_google(\n            recorded_audio, \n            language=\"en-US\"\n        )\n\n    print(\"Decoded Text : {}\".format(text))\n\nexcept Exception as ex:\n\n    print(ex)\n\n\nsr.Microphone.list_microphone_names()",
    "comments": [],
    "dependencies": [
      "'Decoded Text : {}'.format",
      "print",
      "recognizer.adjust_for_ambient_noise",
      "recognizer.listen",
      "recognizer.recognize_google",
      "sr.Microphone",
      "sr.Microphone.list_microphone_names",
      "sr.Recognizer"
    ],
    "imports": [
      "speech_recognition"
    ]
  },
  {
    "id": "repo-clone/app_audio.py::__top_level__",
    "file": "repo-clone/app_audio.py",
    "name": "__top_level__",
    "type": "TopLevel",
    "language": "python",
    "ast_path": [
      "Module"
    ],
    "is_script_entry": true,
    "context": {
      "class": null,
      "is_method": false,
      "is_async": false,
      "decorators": [],
      "args_count": 0,
      "returns": null
    },
    "code_metrics": {
      "line_count": 21,
      "nesting_depth": 0,
      "cyclomatic_complexity": 0,
      "magic_numbers": [],
      "has_docstring": false
    },
    "docstring": "",
    "code": "import speech_recognition as sr\n\nrecognizer = sr.Recognizer()\n\n''' recording the sound '''\n\nwith sr.AudioFile(\"./sample_audio/speech.wav\") as source:\n    recorded_audio = recognizer.listen(source)\n    print(\"Done recording\")\n\n''' Recorgnizing the Audio '''\ntry:\n    print(\"Recognizing the text\")\n    text = recognizer.recognize_google(\n            recorded_audio, \n            language=\"en-US\"\n        )\n    print(\"Decoded Text : {}\".format(text))\n\nexcept Exception as ex:\n    print(ex)",
    "comments": [],
    "dependencies": [
      "'Decoded Text : {}'.format",
      "print",
      "recognizer.listen",
      "recognizer.recognize_google",
      "sr.AudioFile",
      "sr.Recognizer"
    ],
    "imports": [
      "speech_recognition"
    ]
  },
  {
    "id": "repo-clone/long_audio.py::load_chunks",
    "file": "repo-clone/long_audio.py",
    "name": "load_chunks",
    "type": "FunctionDef",
    "language": "python",
    "ast_path": [
      "Module",
      "FunctionDef:load_chunks"
    ],
    "is_script_entry": false,
    "context": {
      "class": null,
      "is_method": false,
      "is_async": false,
      "decorators": [],
      "args_count": 1,
      "returns": null
    },
    "code_metrics": {
      "line_count": 7,
      "nesting_depth": 1,
      "cyclomatic_complexity": 1,
      "magic_numbers": [
        17,
        1800
      ],
      "has_docstring": false
    },
    "docstring": "",
    "code": "def load_chunks(filename):\n    long_audio = AudioSegment.from_mp3(filename)\n    audio_chunks = split_on_silence(\n        long_audio, min_silence_len=1800,\n        silence_thresh=-17\n    )\n    return audio_chunks\n",
    "comments": [],
    "dependencies": [
      "AudioSegment.from_mp3",
      "split_on_silence"
    ],
    "imports": [
      "os",
      "pydub.AudioSegment",
      "pydub.silence.split_on_silence",
      "speech_recognition"
    ]
  }
]