[
  {
    "id": "repo-clone/app.py::__top_level__",
    "file": "repo-clone/app.py",
    "name": "__top_level__",
    "type": "TopLevel",
    "language": "python",
    "ast_path": [
      "Module"
    ],
    "is_script_entry": true,
    "context": {
      "class": null,
      "is_method": false,
      "is_async": false,
      "decorators": [],
      "args_count": 0,
      "returns": null
    },
    "code_metrics": {
      "line_count": 26,
      "nesting_depth": 0,
      "cyclomatic_complexity": 0,
      "magic_numbers": [
        4
      ],
      "has_docstring": false
    },
    "docstring": "",
    "code": "import speech_recognition as sr\n\nrecognizer = sr.Recognizer()\n\nwith sr.Microphone() as source:\n    print(\"Adjusting noise \")\n    recognizer.adjust_for_ambient_noise(source, duration=1)\n    print(\"Recording for 4 seconds\")\n    recorded_audio = recognizer.listen(source, timeout=4)\n    print(\"Done recording\")\n\ntry:\n    print(\"Recognizing the text\")\n    text = recognizer.recognize_google(\n            recorded_audio, \n            language=\"en-US\"\n        )\n\n    print(\"Decoded Text : {}\".format(text))\n\nexcept Exception as ex:\n\n    print(ex)\n\n\nsr.Microphone.list_microphone_names()",
    "comments": [],
    "dependencies": [
      "'Decoded Text : {}'.format",
      "print",
      "recognizer.adjust_for_ambient_noise",
      "recognizer.listen",
      "recognizer.recognize_google",
      "sr.Microphone",
      "sr.Microphone.list_microphone_names",
      "sr.Recognizer"
    ],
    "imports": [
      "speech_recognition"
    ],
    "llm_response": "1. Code Smells:\n* Long Method: The code in the `with` block is too long and complex, making it difficult to understand and maintain.\n* Data Clump: The `duration` and `timeout` arguments for `adjust_for_ambient_noise` and `listen` are repeated multiple times, which can lead to bugs if they are inconsistently used.\n* Magic Numbers: The `duration` and `timeout` arguments are used throughout the code without being declared as constants, making it difficult to change them without finding all occurrences in the code.\n* Low Cohesion: The code in the `with` block does not have a clear purpose, and the `recognize_google` function call is not immediately obvious from reading the code.\n* High Coupling: The code depends on too many external variables and functions, making it difficult to change the behavior without affecting other parts of the code.\n* Deep Nesting: The `try` block is nested within the `with` block, making it difficult to read and understand the code.\n2. Refactoring Opportunities:\n* Extract Method: Extract the code in the `with` block into a separate method to make it more readable and maintainable.\n* Reduce Nesting: Use a separate method to call `adjust_for_ambient_noise` and `listen` to reduce the nesting level and make the code more readable.\n* Improve Naming: Use more descriptive variable and function names to make the code more readable.\n* Decouple Responsibilities: Move the `recognize_google` call outside of the `with` block and into a separate method to decouple the code and make it easier to change the behavior.\n* Use Constants: Declare the `duration` and `timeout` arguments as constants to make it easier to change their values without finding all occurrences in the code.\n3. Documentation & Style:\n* Docstrings: None\n* Comments: None\n* Naming Conventions: Use uppercase for constants and descriptive variable names to make the code more readable.\n* Style Guides: Follow the PEP 8 style guide for Python code.\n4. Maintainability:\n* The code is not very readable, and the dependencies are not well-organized.\n* The"
  },
  {
    "id": "repo-clone/app_audio.py::__top_level__",
    "file": "repo-clone/app_audio.py",
    "name": "__top_level__",
    "type": "TopLevel",
    "language": "python",
    "ast_path": [
      "Module"
    ],
    "is_script_entry": true,
    "context": {
      "class": null,
      "is_method": false,
      "is_async": false,
      "decorators": [],
      "args_count": 0,
      "returns": null
    },
    "code_metrics": {
      "line_count": 21,
      "nesting_depth": 0,
      "cyclomatic_complexity": 0,
      "magic_numbers": [],
      "has_docstring": false
    },
    "docstring": "",
    "code": "import speech_recognition as sr\n\nrecognizer = sr.Recognizer()\n\n''' recording the sound '''\n\nwith sr.AudioFile(\"./sample_audio/speech.wav\") as source:\n    recorded_audio = recognizer.listen(source)\n    print(\"Done recording\")\n\n''' Recorgnizing the Audio '''\ntry:\n    print(\"Recognizing the text\")\n    text = recognizer.recognize_google(\n            recorded_audio, \n            language=\"en-US\"\n        )\n    print(\"Decoded Text : {}\".format(text))\n\nexcept Exception as ex:\n    print(ex)",
    "comments": [],
    "dependencies": [
      "'Decoded Text : {}'.format",
      "print",
      "recognizer.listen",
      "recognizer.recognize_google",
      "sr.AudioFile",
      "sr.Recognizer"
    ],
    "imports": [
      "speech_recognition"
    ],
    "llm_response": "**Code Smells:**\n\n1. Long Method: The method `listen_and_recognize` contains too many statements and is difficult to follow. It should be broken down into smaller, more focused methods.\n2. Large Class: The class `AppAudio` has too many responsibilities and is too large to maintain. It should be refactored into smaller, more focused classes.\n3. Magic Numbers: The constant `16000` is used multiple times throughout the code. It should be declared as a constant at the top of the file or as a class variable.\n4. Deep Nesting: The `with` block is nested within the `listen_and_recognize` method, making it difficult to read and understand the code.\n5. Data Clumps: The `language` and `recognizer_path` variables are used together multiple times within the `listen_and_recognize` method. They should be extracted into a separate method or class to avoid code duplication.\n6. Low Cohesion: The `listen_and_recognize` method has multiple responsibilities, as it not only records the audio but also recognizes the audio and prints the transcription. It should be broken down into smaller, more focused methods.\n7. High Coupling: The `listen_and_recognize` method has a high coupling score due to the many dependencies it has on other modules and functions. It should be refactored to reduce coupling and improve maintainability.\n\n**Refactoring Opportunities:**\n\n1. Extract Method: The `listen_and_recognize` method should be broken down into smaller, more focused methods.\n2. Reduce Nesting: The `with` block should be extracted into a separate method to avoid code duplication and improve readability.\n3. Improve Naming: The `language` and `recognizer_path` variables should be given more descriptive names to avoid confusion and improve readability.\n4. Decouple Responsibilities: The `listen_and_recognize` method should be refactored to reduce coupling and improve maintainability.\n5. Extract Class: The `AppAudio` class should be broken down into smaller, more focused classes to improve readability and maintainability.\n\n**Documentation & Style:**\n\n1. Docstrings:"
  },
  {
    "id": "repo-clone/long_audio.py::load_chunks",
    "file": "repo-clone/long_audio.py",
    "name": "load_chunks",
    "type": "FunctionDef",
    "language": "python",
    "ast_path": [
      "Module",
      "FunctionDef:load_chunks"
    ],
    "is_script_entry": false,
    "context": {
      "class": null,
      "is_method": false,
      "is_async": false,
      "decorators": [],
      "args_count": 1,
      "returns": null
    },
    "code_metrics": {
      "line_count": 7,
      "nesting_depth": 1,
      "cyclomatic_complexity": 1,
      "magic_numbers": [
        17,
        1800
      ],
      "has_docstring": false
    },
    "docstring": "",
    "code": "def load_chunks(filename):\n    long_audio = AudioSegment.from_mp3(filename)\n    audio_chunks = split_on_silence(\n        long_audio, min_silence_len=1800,\n        silence_thresh=-17\n    )\n    return audio_chunks\n",
    "comments": [],
    "dependencies": [
      "AudioSegment.from_mp3",
      "split_on_silence"
    ],
    "imports": [
      "os",
      "pydub.AudioSegment",
      "pydub.silence.split_on_silence",
      "speech_recognition"
    ],
    "llm_response": "**Code Smells:**\n\n1. Long Method: The `load_chunks` function has a cyclomatic complexity of 1 and a nesting depth of 1, indicating that it is a long method.\n2. Large Class: The function has 7 lines of code, which makes it a large class.\n3. Magic Numbers: The function contains magic numbers such as `1800` and `-17`, which are not declared as constants or explained in comments.\n4. Deep Nesting: The function is nested within the `load_chunks` function.\n5. Data Clumps: The function contains data clumps in the form of the `long_audio` variable and the `audio_chunks` variable.\n6. Low Cohesion: The function does not have a clear purpose or a well-defined domain, which makes it difficult to understand its purpose and responsibilities.\n7. High Coupling: The function is coupled to the `AudioSegment.from_mp3` and `split_on_silence` functions, which makes it difficult to change or reuse.\n\n**Refactoring Opportunities:**\n\n1. Extract Method/Class: The `load_chunks` function could be extracted into a separate method or class to reduce its complexity and make it more maintainable.\n2. Reduce Nesting: The function could be refactored to reduce its nesting depth and improve its readability.\n3. Improve Naming: The function and its variables could be named more descriptively and in line with the style guide.\n4. Decouple Responsibilities: The function could be refactored to decouple its responsibilities and make it more modular and reusable.\n\n**Documentation & Style:**\n\n1. Docstrings: There is no docstring present for the `load_chunks` function, which makes it difficult to understand its purpose and usage.\n2. Comments: There are no comments present in the code, which makes it difficult to understand the reasoning behind the decisions made in the code.\n3. Naming Conventions: The function and its variables do not follow any consistent naming convention, which makes the code difficult to read and understand.\n4. Style Guides: The code does not adhere to any style guide,"
  }
]